модуль строки

тип Байты = []Байт

тип Сборщик* = класс {
    байты = Байты[]
    число-символов := 0
}

фн (сб: Сборщик) добавить строку*(ст: Строка) {
    пусть ст8 = ст(:Строка8) 
    сб.число-символов := сб.число-символов + длина(ст8)
    сб.байты.добавить(ст8...)
}

фн (сб: Сборщик) строка*(): Строка {
    вернуть сб.байты(:Строка)
}

фн (сб: Сборщик) число символов*(): Цел64 {
    вернуть сб.число-символов
}

фн добавить-символ(б: Байты, с: Символ)@внеш("имя":"tri_vectorAppend_TSymbol_to_Bytes")

фн (сб: Сборщик) добавить символ*(си: Символ) {
    добавить-символ(сб.байты, си)
    сб.число-символов++
}

фн (сб: Сборщик) число байтов*(): Цел64 {
    вернуть длина(сб.байты)
}

// Для внутреннего использования, добавляет байты, начиная с №-го
фн (сб: Сборщик) добавить байты(с8: Строка8, №: Цел64, число-байтов: Цел64) {
    // TODO: резервировать место
    
    пусть стопор = № + число-байтов
    пока № < стопор {
        сб.байты.добавить(с8[№])
        №++
    }
}